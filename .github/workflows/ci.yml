name: CI
on:
  workflow_dispatch:

  # pull_request_target runs in the context of the base of the pull request, rather than in the context of the merge commit, as the pull_request event does.
  # For workflows that are triggered by the pull_request_target event, the GITHUB_TOKEN is granted read/write repository permission unless the permissions
  # key is specified and the workflow can access secrets, even when it is triggered from a fork.
  # More info: https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#pull_request_target
  pull_request_target:
    types:
      - opened
      - reopened
      - synchronize
      - ready_for_review
    paths:
      - 'services/**'
      - 'shared/**'
      - 'package.json'
      - 'pnpm-lock.yaml'
      - 'pnpm-workspace.yaml'
      - '*.json'
      - '*.js'
      - '*.ts'
      - '*.yaml'
    branches:
      - main

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  verify-and-build:
    runs-on: [ ubuntu-latest ]
    if: (!github.event.pull_request || github.event.pull_request.draft == false)
    env:
      CI: false
      NODE_OPTIONS: --max-old-space-size=4096

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - uses: pnpm/action-setup@v4
        name: Install pnpm
        with:
          run_install: false

      - name: Use node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22.x
          cache: "pnpm"

      - name: Install dependencies
        shell: bash
        run: pnpm install --frozen-lockfile

      - name: Check code Style
        run: pnpm format:check

      - name: build all packages
        run: pnpm build

      - name: Execute Linter
        run: pnpm lint

      - name: type checking # Check this later on to run tsc:full instead to check transitive dependencies as well
        run: pnpm tsc

      - name: verify type dependencies
        run: pnpm nodeboot:check:type-deps

      - name: ensure clean working directory
        run: |
          if files=$(git ls-files --exclude-standard --others --modified) && [[ -z "$files" ]]; then
            exit 0
          else
            echo ""
            echo "Working directory has been modified:"
            echo ""
            git status --short
            echo ""
            exit 1
          fi
